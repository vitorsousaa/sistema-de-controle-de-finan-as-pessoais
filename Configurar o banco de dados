// db.js
import { Pool } from 'pg';

const pool = new Pool({
  user: 'seu_usuario',
  host: 'localhost',
  database: 'seu_banco_de_dados',
  password: 'sua_senha',
  port: 5432,
});

// configuração para conexão com o banco de dados.
export default pool;

//Rotas de API:

//Registro do usuario:

// pages/api/auth/register.js
import bcrypt from 'bcryptjs';
import pool from '../../../db';

export default async function handler(req, res) {
  if (req.method === 'POST') {
    const { nome, email, senha } = req.body;

    const salt = bcrypt.genSaltSync(10);
    const senha_hash = bcrypt.hashSync(senha, salt);

    try {
      const { rows } = await pool.query(
        'INSERT INTO usuarios (nome, email, senha_hash) VALUES ($1, $2, $3) RETURNING *',
        [nome, email, senha_hash]
      );

      res.status(201).json({ user: rows[0] });
    } catch (error) {
      res.status(500).json({ message: 'Erro ao registrar usuário' });
    }
  } else {
    res.status(405).end(); // Método não permitido
  }
}

// Login do usuario:

// pages/api/auth/login.js
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import pool from '../../../db';

const JWT_SECRET = 'seu_segredo_jwt';

export default async function handler(req, res) {
  if (req.method === 'POST') {
    const { email, senha } = req.body;

    try {
      const { rows } = await pool.query('SELECT * FROM usuarios WHERE email = $1', [email]);

      if (rows.length === 0) {
        return res.status(401).json({ message: 'Usuário não encontrado' });
      }

      const user = rows[0];

      const validPassword = bcrypt.compareSync(senha, user.senha_hash);
      if (!validPassword) {
        return res.status(401).json({ message: 'Senha incorreta' });
      }

      const token = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, { expiresIn: '1h' });

      res.status(200).json({ token });
    } catch (error) {
      res.status(500).json({ message: 'Erro ao fazer login' });
    }
  } else {
    res.status(405).end(); // Método não permitido
  }
}


